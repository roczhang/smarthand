<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElencySolutions.CsvHelper</name>
    </assembly>
    <members>
        <member name="T:ElencySolutions.CsvHelper.CsvWriter">
            <summary>
            Class to write data to a csv file
            </summary>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(ElencySolutions.CsvHelper.CsvFile,System.String)">
            <summary>
            Writes csv content to a file
            </summary>
            <param name="csvFile">CsvFile</param>
            <param name="filePath">File path</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(ElencySolutions.CsvHelper.CsvFile,System.String,System.Text.Encoding)">
            <summary>
            Writes csv content to a file
            </summary>
            <param name="csvFile">CsvFile</param>
            <param name="filePath">File path</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(ElencySolutions.CsvHelper.CsvFile,System.IO.Stream)">
            <summary>
            Writes csv content to a stream
            </summary>
            <param name="csvFile">CsvFile</param>
            <param name="stream">Stream</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(ElencySolutions.CsvHelper.CsvFile,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Writes csv content to a stream
            </summary>
            <param name="csvFile">CsvFile</param>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(ElencySolutions.CsvHelper.CsvFile,System.Text.Encoding)">
            <summary>
            Writes csv content to a string
            </summary>
            <param name="csvFile">CsvFile</param>
            <param name="encoding">Encoding</param>
            <returns>Csv content in a string</returns>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(System.Data.DataTable,System.String)">
            <summary>
            Writes a DataTable to a file
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="filePath">File path</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(System.Data.DataTable,System.String,System.Text.Encoding)">
            <summary>
            Writes a DataTable to a file
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="filePath">File path</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(System.Data.DataTable,System.IO.Stream)">
            <summary>
            Writes a DataTable to a stream
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="stream">Stream</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(System.Data.DataTable,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Writes a DataTable to a stream
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteCsv(System.Data.DataTable,System.Text.Encoding)">
            <summary>
            Writes the DataTable to a string
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="encoding">Encoding</param>
            <returns>Csv content in a string</returns>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteToStream(ElencySolutions.CsvHelper.CsvFile,System.IO.TextWriter)">
            <summary>
            Writes the Csv File
            </summary>
            <param name="csvFile">CsvFile</param>
            <param name="writer">TextWriter</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteToStream(System.Data.DataTable,System.IO.TextWriter)">
            <summary>
            Writes the Csv File
            </summary>
            <param name="dataTable">DataTable</param>
            <param name="writer">TextWriter</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.WriteRecord(System.Collections.Generic.IList{System.String},System.IO.TextWriter)">
            <summary>
            Writes the record to the underlying stream
            </summary>
            <param name="fields">Fields</param>
            <param name="writer">TextWriter</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvWriter.Dispose">
            <summary>
            Disposes of all unmanaged resources
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvWriter.ReplaceCarriageReturnsAndLineFeedsFromFieldValues">
            <summary>
            Gets or sets whether carriage returns and line feeds should be removed from 
            field values, the default is true 
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvWriter.CarriageReturnAndLineFeedReplacement">
            <summary>
            Gets or sets what the carriage return and line feed replacement characters should be
            </summary>
        </member>
        <member name="T:ElencySolutions.CsvHelper.CsvReader">
            <summary>
            Class to read csv content from various sources
            </summary>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.#ctor(System.String)">
            <summary>
            Initialises the reader to work from a file
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initialises the reader to work from a file
            </summary>
            <param name="filePath">File path</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.#ctor(System.IO.Stream)">
            <summary>
            Initialises the reader to work from an existing stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initialises the reader to work from an existing stream
            </summary>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Initialises the reader to work from a csv string
            </summary>
            <param name="encoding"></param>
            <param name="csvContent"></param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.Initialise(System.String,System.Text.Encoding)">
            <summary>
            Initialises the class to use a file
            </summary>
            <param name="filePath"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.Initialise(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initialises the class to use a stream
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.Initialise(System.Text.Encoding,System.String)">
            <summary>
            Initialies the class to use a string
            </summary>
            <param name="encoding"></param>
            <param name="csvContent"></param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record
            </summary>
            <returns>True if a record was successfuly read, otherwise false</returns>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.ReadIntoDataTable">
            <summary>
            Reads a csv file format into a data table.  This method
            will always assume that the table has a header row as this will be used
            to determine the columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.ReadIntoDataTable(System.Type[])">
            <summary>
            Reads a csv file format into a data table.  This method
            will always assume that the table has a header row as this will be used
            to determine the columns.
            </summary>
            <param name="columnTypes">Array of column types</param>
            <returns></returns>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.ParseLine(System.String)">
            <summary>
            Parses a csv line
            </summary>
            <param name="line">Line</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvReader.Dispose">
            <summary>
            Disposes of all unmanaged resources
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvReader.TrimColumns">
            <summary>
            Gets or sets whether column values should be trimmed
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvReader.HasHeaderRow">
            <summary>
            Gets or sets whether the csv file has a header row
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvReader.Fields">
            <summary>
            Returns a collection of fields or null if no record has been read
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvReader.FieldCount">
            <summary>
            Gets the field count or returns null if no fields have been read
            </summary>
        </member>
        <member name="T:ElencySolutions.CsvHelper.CsvReader.Type">
            <summary>
            Type enum
            </summary>
        </member>
        <member name="T:ElencySolutions.CsvHelper.CsvFile">
            <summary>
            Class to hold csv data
            </summary>
        </member>
        <member name="F:ElencySolutions.CsvHelper.CsvFile.Headers">
            <summary>
            Gets the file headers
            </summary>
        </member>
        <member name="F:ElencySolutions.CsvHelper.CsvFile.Records">
            <summary>
            Gets the records in the file
            </summary>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.String,System.Boolean)">
            <summary>
            Populates the current instance from the specified file
            </summary>
            <param name="filePath">File path</param>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.String,System.Boolean,System.Boolean)">
            <summary>
            Populates the current instance from the specified file
            </summary>
            <param name="filePath">File path</param>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="trimColumns">True if column values should be trimmed, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.String,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Populates the current instance from the specified file
            </summary>
            <param name="filePath">File path</param>
            <param name="encoding">Encoding</param>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="trimColumns">True if column values should be trimmed, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.IO.Stream,System.Boolean)">
            <summary>
            Populates the current instance from a stream
            </summary>
            <param name="stream">Stream</param>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Populates the current instance from a stream
            </summary>
            <param name="stream">Stream</param>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="trimColumns">True if column values should be trimmed, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Populates the current instance from a stream
            </summary>
            <param name="stream">Stream</param>
            <param name="encoding">Encoding</param>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="trimColumns">True if column values should be trimmed, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.Boolean,System.String)">
            <summary>
            Populates the current instance from a string
            </summary>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="csvContent">Csv text</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.Boolean,System.String,System.Boolean)">
            <summary>
            Populates the current instance from a string
            </summary>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="csvContent">Csv text</param>
            <param name="trimColumns">True if column values should be trimmed, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.Populate(System.Boolean,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Populates the current instance from a string
            </summary>
            <param name="hasHeaderRow">True if the file has a header row, otherwise false</param>
            <param name="csvContent">Csv text</param>
            <param name="encoding">Encoding</param>
            <param name="trimColumns">True if column values should be trimmed, otherwise false</param>
        </member>
        <member name="M:ElencySolutions.CsvHelper.CsvFile.PopulateCsvFile(ElencySolutions.CsvHelper.CsvReader)">
            <summary>
            Populates the current instance using the CsvReader object
            </summary>
            <param name="reader">CsvReader</param>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvFile.HeaderCount">
            <summary>
            Gets the header count
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvFile.RecordCount">
            <summary>
            Gets the record count
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvFile.Item(System.Int32)">
            <summary>
            Gets a record at the specified index
            </summary>
            <param name="recordIndex">Record index</param>
            <returns>CsvRecord</returns>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvFile.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field value at the specified record and field index
            </summary>
            <param name="recordIndex">Record index</param>
            <param name="fieldIndex">Field index</param>
            <returns></returns>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvFile.Item(System.Int32,System.String)">
            <summary>
            Gets the field value at the specified record index for the supplied field name
            </summary>
            <param name="recordIndex">Record index</param>
            <param name="fieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="T:ElencySolutions.CsvHelper.CsvRecords">
            <summary>
            Class for a collection of CsvRecord objects
            </summary>
        </member>
        <member name="T:ElencySolutions.CsvHelper.CsvRecord">
            <summary>
            Csv record class
            </summary>
        </member>
        <member name="F:ElencySolutions.CsvHelper.CsvRecord.Fields">
            <summary>
            Gets the Fields in the record
            </summary>
        </member>
        <member name="P:ElencySolutions.CsvHelper.CsvRecord.FieldCount">
            <summary>
            Gets the number of fields in the record
            </summary>
        </member>
    </members>
</doc>
